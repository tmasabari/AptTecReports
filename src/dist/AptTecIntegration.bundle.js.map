{"version":3,"file":"AptTecIntegration.bundle.js","mappings":"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","sources":["webpack://@apttec/reports/webpack/bootstrap","webpack://@apttec/reports/webpack/runtime/define property getters","webpack://@apttec/reports/webpack/runtime/hasOwnProperty shorthand","webpack://@apttec/reports/webpack/runtime/make namespace object","webpack://@apttec/reports/./node_modules/@apttec/utils/modules/DynamicControls.js","webpack://@apttec/reports/./node_modules/@apttec/utils/modules/Json.js","webpack://@apttec/reports/./node_modules/@apttec/utils/modules/Graphics.js","webpack://@apttec/reports/./node_modules/@apttec/utils/modules/index.js","webpack://@apttec/reports/./node_modules/@apttec/utils/modules/Downloader.js","webpack://@apttec/reports/./Resources/Scripts/Integration/AptTecIntegration.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2023 Sabarinathan Arthanari\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * \n */\n\n/** \n * The list of utility functions to generate the HTML elements dynamically and to load the resources dynamically.\n * These utility functions are available individually as well for tree shaking.\n * @module DynamicControls\n */\nexport { autoDownloadUrl, createButton, createControl, createUrlFromJsonString, \n    createUrlFromObject, loadScript, loadStylesheet, createAssignElement, createButtonAtParent };\n\n/**\n * creates an HTML element and optionally assign the properties\n * \n * @function createAssignElement\n * @param {string} name of the tag to generate. should be a valid HTML tag name. \n * @param {object} the object that containes properties to be assigned to the element. The default value is  undefined\n * @returns {Element} - the created control\n */\nfunction createAssignElement(tag, propObject = undefined) {\n    const element = globalThis.document.createElement(tag);\n    return (propObject) ? Object.assign(element, propObject) : element;\n}\n\n/**\n * creates an HTML element and assign the CSS classes, creates an icon within the element, inserts the text within the element\n * \n * @function createControl\n * @param {string} tag - HTML tag to be generated\n * @param {string} controlClass  - the CSS clases to be used for the element\n * @param {string} iconClass  - the icnon to be inserted between the element\n * @param {string} label  - the text to be inserted between the element\n * @returns {Element} - the created control\n */\nfunction createControl(tag, controlClass, iconClass, label) {\n    const control = createAssignElement(tag);\n    if (controlClass) control.className = controlClass;\n    if (iconClass) control.innerHTML = `<i class=\"${iconClass}\"></i>`;\n    if (label) control.innerHTML += ` ${label}`;\n    return control;\n}\n    \n/**\n * creates an HTML Button and assigns the CSS classes, creates an icon within the element, inserts the text within the Button\n * \n * @function createButton\n * @param {string} buttonClass - the CSS clases to be used for the button\n * @param {string} iconClass  - the icnon to be inserted between the button\n * @param {string} label  - the text to be inserted between the button\n * @param {function} onClick - the click event handler\n * @returns {Element} - the created button\n */\nfunction createButton(buttonClass, iconClass, label, onClick) {\n    const button = createControl('button', buttonClass, iconClass, label);\n    button.addEventListener('click', onClick);\n    return button;\n}\n\n/**\n * creates an HTML Button within an existing element, and assigns the CSS classes, creates an icon within the element, inserts the text within the Button\n * \n * @function createButtonAtParent\n * @param {string} id - Element Id\n * @param {string} buttonParent - Parent element css selector\n * @param {string} buttonClass - the CSS clases to be used for the button\n * @param {string} iconClass  - the icnon to be inserted between the button\n * @param {string} buttonText - the text to be inserted between the button\n * @param {string} location - the valid values are 'start' or 'end'. start-prepend the element. end-append the element \n * @param {object} dataAttributesObject - all the attributes from this object will be applied as the data attributes to be used for the element.\n * @param {string} extraInformation - the extra HTML snippet to be directly applied to the tag\n * @param {boolean} preventDuplicate - if the value is true checks for the existing duplicate button and throws error if already exists\n * @returns {Element} - the created button\n */\nfunction createButtonAtParent(id, buttonParent, buttonClass, iconClass, buttonText,\n    location = 'start', dataAttributesObject = {}, extraInformation = '', preventDuplicate = true) {\n\n    var parentElement = globalThis.document.querySelector(buttonParent) ;\n    if (!(parentElement)) throw 'Could not add a button. Please check buttonParent selector';\n\n    const buttonSelector = buttonParent + ' #' + id;\n    if (preventDuplicate) {\n        const ButtonObject = globalThis.document.querySelector(buttonSelector) ;\n        if (ButtonObject) {\n            return {\n                ButtonObject: ButtonObject,\n                AlreadyExists: true     //if button already exists do not add again\n            };\n        }\n    }\n\n    var attributesText = ` id='${id}' ${extraInformation} `;\n    dataAttributesObject['parent-selector'] = buttonParent;\n    if (dataAttributesObject) {\n        for (const [key, value] of Object.entries(dataAttributesObject)) {\n            attributesText += ` data-${key}='${value}'`;\n        }\n    }\n    const buttonTagText = `<button ${attributesText}  class='${buttonClass}' type='button' >\n                <i class='${iconClass}'></i>${buttonText}</button>`;\n\n    if (location === 'start')\n        parentElement.innerHTML = buttonTagText + parentElement.innerHTML; //prepend html text\n    else\n        parentElement.innerHTML += buttonTagText; //append html text\n\n    const ButtonObject = globalThis.document.querySelector(buttonSelector);\n    return {\n        ButtonObject: ButtonObject,\n        AlreadyExists: false\n    };\n}\n\n/**\n * creates the downloadable URL from the JsonString\n * \n * @function createUrlFromJsonString\n * @param {string} jsonString - the string to be converted to the downloadable URL\n * @returns {string} URL string\n */\nfunction createUrlFromJsonString(jsonString) {\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    return url;\n}\n\n/**\n * Generates the downloadable URL from the object\n * \n * @function createUrlFromObject\n * @param {object} object - the object to be converted to the JSON string, blob and then to the URL\n * @returns {string} URL string\n */\nfunction createUrlFromObject(object) {\n    const jsonString = JSON.stringify(object, null, 2);\n    //space (2): A string or number that's used to add whitespace to the output JSON string for formatting purposes.\n    return createUrlFromJsonString(jsonString);\n}\n\n/**\n * creates an anchor link and initiates the download by calling the click event\n * \n * @param {string} url - the URL of the resource to download\n * @param {string} filename - the file name is to be used for the download\n */\nfunction autoDownloadUrl(url, filename = 'data.json') {\n    const a = createAssignElement('a', {\n        href: url, download : filename\n    } );\n    a.click();\n}\n\n//dynamic loading ===================================================\n/**\n * Includes the style sheet object to the head of the document.\n * \n * @param {string} url - the url to download the style sheet\n */\nfunction loadStylesheet(url) {\n    var link = createAssignElement('link', {\n        href: url, rel: 'stylesheet'\n    });\n    globalThis.document.head.appendChild(link);\n}\n/**\n * Includes the script object to the head of the document. https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement\n * \n * @param {string} url - the url to download the script\n * @param {function} callbackOnLoad | call a function after the script is loaded\n * @param {boolean} isDefer | If the async attribute is absent but the defer attribute is present, then the script is executed when the page has finished parsing.\n * @param {boolean} isAsync | If the async attribute is present, then the script will be executed asynchronously as soon as it downloads.\n * The defer attribute may be specified with the async attribute, so legacy browsers that only support defer (and not async) fall back to the defer behavior instead of the default blocking behavior.\n * If neither attribute is present, then the script is fetched and executed immediately, blocking further parsing of the page.\n */\nfunction loadScript(url, callbackOnLoad = undefined, isDefer = undefined, isAsync = undefined) {\n    var script = createAssignElement('script', {\n        src: url, type: 'text/javascript', async: isAsync, defer: isDefer, onload : callbackOnLoad\n    }); \n    globalThis.document.head.appendChild(script);\n} ","/**\r\n * Copyright (c) 2023 Sabarinathan Arthanari\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n * \r\n */\r\n\r\n/** \r\n * The list of utility functions to generate and manipulate the Json data.\r\n * These utility functions are available individually as well for tree shaking.\r\n * @module Json\r\n */\r\nexport { mergeExistingProperties, firstNCharacters, getKendoSortedData };\r\n\r\n/**\r\n * Deep copies/clones the target object and merges the properties from the source object to the target \r\n *  only if the property already exists in the target object.\r\n * @param {object} target the destination object to merge the properties and values\r\n * @param {object} source the source object to get the list of properties and values\r\n * @returns the new merged object\r\n */\r\nfunction mergeExistingProperties(target, source) {\r\n    let result = JSON.parse(JSON.stringify(target));  //deep copy\r\n    for (const key in source) {\r\n        if ( Object.prototype.hasOwnProperty.call(result, key) ) {\r\n            result[key] = source[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * iterates through each object in an array and takes first n number of characters in a particular property \r\n * @param {Array} jsonArray the source JSON array to process\r\n * @param {string} propertyToModify the name of the property to trim\r\n * @param {number} n the initial number of characters to trim. integer\r\n * @returns the modified array\r\n */\r\nfunction firstNCharacters(jsonArray, propertyToModify, n) {\r\n    jsonArray.forEach(item => {\r\n        if ( (item[propertyToModify]) && item[propertyToModify].length > n) {\r\n            item[propertyToModify] = item[propertyToModify].substring(0, n);\r\n        }\r\n    });\r\n    return jsonArray;\r\n}\r\n\r\n//Kendo ===================================================\r\n/**\r\n * Get the unpaginated (full) sorted data from the kendo grid\r\n * @param {string} gridSelector the HTML element selector of the kendo grid\r\n * @returns the json array\r\n */\r\nfunction getKendoSortedData(gridSelector) {\r\n    var element = globalThis.document.querySelector(gridSelector);\r\n    if (!(element)) return null;  //if it is not a valid element in the document return empty \r\n    // https://www.telerik.com/forums/get-sorted-items-without-paging\r\n    var grid = element.data('kendoGrid');\r\n    if (!(grid))\r\n        return null;  //if it is not a kendo grid return empty \r\n\r\n    var result = null;\r\n    var dataSource = grid.dataSource;\r\n    var data = dataSource.data();\r\n    var sort = dataSource.sort();\r\n    if (data.length > 0 && sort) {  //sort throws error in case data length =0\r\n        var query = new window.kendo.data.Query(data);\r\n        var sortedData = query.sort(sort).data;\r\n        result = sortedData;\r\n    }\r\n    else {\r\n        result = data;\r\n    }\r\n    return result;\r\n}","/**\r\n * Copyright (c) 2023 Sabarinathan Arthanari\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n * \r\n */\r\n\r\n/** \r\n * The list of utility functions to manage the graphics operations.\r\n * These utility functions are available individually as well for tree shaking.\r\n * @module Graphics\r\n*/\r\nexport { getDeviceDPI };\r\n\r\n\r\n/**\r\n * Identifies the DPI of the screen. Generally the horizontal and vertical DPI will be same for display.\r\n * @returns the screen DPI\r\n */\r\nfunction getDeviceDPI()\r\n{\r\n    const dpiDiv = document.createElement('div');\r\n    dpiDiv.style.width = '1in';\r\n    document.body.appendChild(dpiDiv);\r\n    const dpi = dpiDiv.offsetWidth;\r\n    document.body.removeChild(dpiDiv);\r\n    return dpi;\r\n}","/**\n * Copyright (c) 2023 Sabarinathan Arthanari\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Loads the globalThis.AptTec.Downloader with Downloader class\n * Loads the globalThis.AptTec.DynamicControls with the utility functions\n * These utility functions are available individually as well for tree shaking.\n */\n//https://stackoverflow.com/questions/35665759/es6-how-can-you-export-an-imported-module-in-a-single-line\nimport { Downloader } from './Downloader.js';\nimport * as DynamicControls from './DynamicControls.js';\nimport * as Json from './Json.js';\nimport * as Graphics from './Graphics.js';\n\nexport { Downloader } from './Downloader.js';\nexport * from './DynamicControls.js';\nexport * from './Json.js';\nexport * from './Graphics.js';\n\nglobalThis.AptTec = globalThis.AptTec || {};\nglobalThis.AptTec.Downloader = Downloader;\nglobalThis.AptTec.DynamicControls = DynamicControls;\nglobalThis.AptTec.Json = Json;\nglobalThis.AptTec.Graphics = Graphics;\n\n// if (typeof module !== 'undefined') { //&& module.exports\n//     // Node.js environment\n//     // module.exports = {\n//     //     function1: require('./utils/function1'),\n//     //     function2: require('./utils/function2'),\n//     //     Downloader: Downloader\n//     // };\n// } else { // Browser environment Your browser-specific code here \n// }","/**\r\n * Copyright (c) 2023 Sabarinathan Arthanari\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n * \r\n */\r\n\r\n/**\r\n * Download the file using multiple chunks in parallel to increase the download the speed\r\n * The server must support accept-ranges header.\r\n * \r\n */\r\nexport { Downloader };\r\nclass Downloader {\r\n    /**\r\n     * Download the file using multiple chunks in parallel to increase the download the speed\r\n     * The server must support accept-ranges header.\r\n     * if file length is lesser than the minFileSize in bytes, the simple download will be used\r\n     * \r\n     * @param {string} url - The URL to download from.\r\n     * @param {number} minFileSize - the minimum file length in bytes to initiate chunked download. Default value is 1 MB.\r\n     * @param {number} maxRetries - the number of retries will be used in case of a network failure. Default value is 9\r\n     * @param {number} retryDelay - the number of milli seconds to wait in case of a netowrk failure. Default value is 3 seconds.\r\n     * @param {number} splits - the number of chunks to be used at a same time. Default value is 10.\r\n     */\r\n    constructor(url, minFileSize = 1024 * 1024, maxRetries = 9, retryDelay = 3000, splits=10) {\r\n        this.url = url;\r\n        this.minFileSize = minFileSize;\r\n        this.splits = splits;\r\n        this.maxRetries = maxRetries;\r\n        this.retryDelay = retryDelay;\r\n        this.chunkCompleted = new Event('chunkCompleted');\r\n\r\n        this.chunkSize = -1;\r\n        this.fileLength = -1;\r\n    }\r\n\r\n    /**\r\n     * start the download asynchronously\r\n     * \r\n     * @returns {Promise<Blob>} - The data from the URL.\r\n     */\r\n    async download() {\r\n        try {\r\n            // Check if the server supports byte-range requests and get file length.\r\n            const { supportsChunked, fileLength } = await this.#checkChunkedSupport();\r\n            this.fileLength = fileLength;\r\n            if (supportsChunked && fileLength >= this.minFileSize) {\r\n                this.chunkSize = Math.ceil(fileLength / this.splits);\r\n                // If the server supports chunked responses and file length is sufficient, use chunked download.\r\n                const blob = await this.#downloadChunked();\r\n                console.log('Chunked download completed.');\r\n                return blob;\r\n            } else {\r\n                // If not, use a simple download method.\r\n                const blob = await this.downloadSimple();\r\n                console.log('Simple download completed.');\r\n                return blob;\r\n            }\r\n        } catch (error) {\r\n            console.error('An error occurred:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * initiates the unparallel download asynchronously\r\n     * \r\n     * @returns {Promise<Blob>} - The data from the URL.\r\n     */\r\n    async downloadSimple() {\r\n        const buffer = await this.#downloadChunk(-1, -1);\r\n        return new Blob([buffer] );\r\n    }\r\n\r\n    async #checkChunkedSupport() {\r\n        try {\r\n            const response = await fetch(this.url, { method: 'HEAD' });\r\n            const acceptRanges = response.headers.get('accept-ranges');\r\n            const contentLength = parseInt(response.headers.get('content-length'));\r\n\r\n            return {\r\n                supportsChunked: acceptRanges === 'bytes',\r\n                fileLength: contentLength,\r\n            };\r\n        } catch (error) {\r\n            console.error('Error checking chunked support:', error);\r\n            return {\r\n                supportsChunked: false,\r\n                fileLength: 0,\r\n            };\r\n        }\r\n    }\r\n\r\n    async #downloadChunked() {\r\n        const chunks = [];\r\n        let startByte = 0;\r\n        var downloadedSize=0;\r\n        const promises = [];\r\n        const totalSize = this.fileLength;\r\n        while (startByte < totalSize) {\r\n            const endByte = Math.min(startByte + this.chunkSize - 1, totalSize - 1);\r\n            const closureBlock = () => { //create a closure function to maintain the start and end variables\r\n                const start = startByte, end = endByte;\r\n                const promise = this.#downloadChunk(start, end)\r\n                    .then((chunk) => {\r\n                        chunks.push({ start, chunk });\r\n\r\n                        // Calculate and dispatch the download progress.\r\n                        downloadedSize += end - start  + 1;\r\n                        const progress = (downloadedSize / totalSize) * 100;\r\n                        this.chunkCompleted.detail = {\r\n                            downloadedSize,\r\n                            totalSize,\r\n                            progress,\r\n                        };\r\n                        document.dispatchEvent(this.chunkCompleted);\r\n\r\n                        // You can update a progress bar or display the progress to the user here.\r\n                    })\r\n                    .catch((error) => {\r\n                        // Handle download error, including retries.\r\n                        return this.#handleDownloadError(error, start, end);\r\n                    });\r\n                promises.push(promise);\r\n            };\r\n            closureBlock();\r\n            startByte = endByte + 1;\r\n        }\r\n\r\n        // Wait for all chunk promises to complete.\r\n        await Promise.all(promises);\r\n\r\n        // Sort the chunks by their startByte to ensure they are in the correct order.\r\n        chunks.sort((a, b) => a.start - b.start);\r\n\r\n        // Concatenate the chunks in order to create the final Blob.\r\n        const blob = new Blob(chunks.map((chunkData) => chunkData.chunk));\r\n        return blob;\r\n    }\r\n\r\n    async #downloadChunk(startByte, endByte) {\r\n        const response = startByte < 0 \r\n            ? await fetch(this.url) \r\n            :  await fetch(this.url, {\r\n                headers: { Range: `bytes=${startByte}-${endByte}` },\r\n            });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Chunk download failed with status code: ${response.status}`);\r\n        }\r\n        // const body = await response.body;\r\n        // const readResult = await body.getReader().read();\r\n        // const { value, done } = readResult;\r\n\r\n        // if (done) {\r\n        //     throw new Error('Unexpected end of chunk.');\r\n        // }\r\n\r\n        const value = await response.arrayBuffer();\r\n        return value;\r\n    }\r\n\r\n    async #handleDownloadError(error, startByte, endByte) {\r\n        console.error('Chunk download error:', error);\r\n\r\n        if (this.maxRetries > 0) {\r\n            // Retry the chunk download with exponential backoff.\r\n            await new Promise((resolve) => setTimeout(resolve, this.retryDelay));\r\n            console.log('Retrying chunk download...');\r\n            this.maxRetries--;\r\n            return this.#handleDownloadError(\r\n                await this.#downloadChunk(startByte, endByte), startByte, endByte );\r\n        } else {\r\n            throw error; // Max retries reached, propagate the error.\r\n        }\r\n    }\r\n}","'use strict';\r\nimport { getKendoSortedData, createButtonAtParent } from '@apttec/utils';\r\n\r\nwindow.AptTecReporting = window.AptTecReporting || {};\r\nwindow.AptTecReporting.Kendo = {};\r\nwindow.AptTecReporting.Kendo.getSortedData = getKendoSortedData;\r\nwindow.AptTecReporting.Integration = class AptTecIntegration {\r\n    #designerHTMLPath = 'Pages/designer.html';\r\n    #templateToReplace ='{{SourceUrl}}';\r\n    #defaultFrameStyle =`\r\n                position: absolute;\r\n                height: calc(100vh - 120px);\r\n                border: 1px solid black;\r\n                margin-left: -1px;\r\n                margin-top: -1px;\r\n                z-index: 1000;\r\n                width: 99%;\r\n                top: 92px;\r\n                display:none;\r\n                `;\r\n    #allPreviewButtonSelector = '.AptTecPrintPreview';\r\n    #frameElement = null;\r\n    #isSourceUrlLoaded = false;\r\n    #sourceUrl ='';\r\n    #previewFrameId='';\r\n    #templatesLocation='';\r\n    /**\r\n     * This integration is using the IFrame tag to avoid the css and scripts conflicts between the caller and library\r\n     * There will be clear separation of concerns\r\n     * @param {string} sourceUrl - The library can hosted on local or remote website.\r\n     *      sample local path '/reports' remote path 'https://your.staticwebsite.com/reports'\r\n     *      for remote website CORS must be enabled.\r\n     * @param {string} previewFrameId -   Common preview form on the master layout or SPA or MPA pages\r\n     *      There could be multiple data regions in a SPA or master layout\r\n     *      However only one preview can be shown at a time.\r\n     * @param {string} templatesLocation - Customize your templates folder path based on requirements.\r\n     *      You can set different templatesLocation for different tenants/clients for multi-tenant scenarios.\r\n     * @param {string} frameStyle - The styles to be applied for the preview frame.\r\n     */\r\n    constructor(sourceUrl, previewFrameId, templatesLocation, frameStyle, isPreviewTypeDesigner=false){\r\n        this.aptTecData = { CommonData: {}, InstanceData: {}, Data: [] };\r\n\r\n        this.designerWindow = null;\r\n        this.isPreviewTypeDesigner = isPreviewTypeDesigner;\r\n\r\n        this.#sourceUrl = sourceUrl.endsWith('/') ? sourceUrl : sourceUrl + '/' ;\r\n        this.#previewFrameId = previewFrameId; \r\n        this.#addIFrameTag(frameStyle);\r\n        this.#frameElement = document.getElementById(this.#previewFrameId);\r\n        this.#templatesLocation = templatesLocation;\r\n        this.#loadSourceUrl();\r\n    }\r\n    #addIFrameTag(frameStyle) {\r\n        const style = (frameStyle) ? frameStyle : this.#defaultFrameStyle;\r\n        const iFrameTag = `\r\n        <style>\r\n            #${this.#previewFrameId} { ${style} } \r\n        </style>\r\n        <iframe id=\"${this.#previewFrameId}\"></iframe>`;\r\n        $('body').append(iFrameTag);\r\n    }\r\n\r\n    #loadSourceUrl() {\r\n        const designerHTMLUrl = this.#sourceUrl + this.#designerHTMLPath;\r\n        fetch(designerHTMLUrl)\r\n            .then(response => response.text())       //response[0].text()\r\n            .then(html_template => {\r\n                var modified_html = html_template.replace(\r\n                    new RegExp(this.#templateToReplace, 'ig'), this.#sourceUrl );\r\n                this.#frameElement.srcdoc = modified_html;\r\n                this.#frameElement.onload = () => { this.#frameLoaded(); };\r\n            })\r\n            .catch(error => {\r\n                console.error('Error loading the preview designer:', error);\r\n            });\r\n    }\r\n\r\n    #frameLoaded() {\r\n        this.#isSourceUrlLoaded = true;\r\n        $(this.#allPreviewButtonSelector).prop('disabled', false); //enable all printpreview buttons\r\n        this.designerWindow = document.getElementById(this.#previewFrameId).contentWindow;\r\n        this.designerWindow.initilizePreview({\r\n            templatesLocation: this.#templatesLocation,\r\n            sourceUrl: this.#sourceUrl,\r\n            closeAction: () => $('#' + this.#previewFrameId).hide()\r\n        });\r\n        this.designerWindow.aptTecReports.showHideDesigner(this.isPreviewTypeDesigner);\r\n    }\r\n\r\n    get aptTecReports() {\r\n        return this.designerWindow.aptTecReports;\r\n    }\r\n    /**\r\n     * Add the preview button\r\n     * @param {string} reportId - specifies the report id to fetch the report template from the template location. The product will use the URL aptTecintegration.templatesLocation + '/' + reportId. For example '/Demo/reports/Templates/MyReport'\r\n     * @param {string} buttonParent - the CSS selector to identify the parent within the page to place the preview button\r\n     * @param {object} attributesObject - The object with the set of additional data attributes to be included in the button. It is an optional parameter\r\n     * @param {string} buttonClass - The string to specify the CSS classes for the button. Optional.\r\n     * @param {string} iconClass - The string to specify the CSS classes for the icon within the button. Optional.\r\n     * @param {string} buttonText - You can leave this empty if you like to create tool bar button\r\n     * @param {string} location - The value can be 'start, or 'end', to specify the location of the button within the parent\r\n     * @returns {object} AlreadyExists - true if the button already exists and the add logic is skipped, false if it is newly added.\r\n     */\r\n    addPreviewButton(reportId, buttonParent, attributesObject = {}, dataSetter = null,\r\n        buttonClass = 'btn btn-success', iconClass = 'fa fa-print', \r\n        buttonText = '', location = 'start', buttonid=null )  {\r\n        var buttonResult = this.#addPreviewButton(buttonid, reportId, buttonParent, attributesObject,\r\n            buttonClass, iconClass, buttonText, location);\r\n        if (buttonResult.AlreadyExists) return;\r\n        this.#HandlePreviewButton(buttonResult, dataSetter);\r\n        return buttonResult;\r\n    }\r\n    #addPreviewButton(buttonid, reportId, buttonParent, attributesObject, \r\n        buttonClass, iconClass, buttonText, location) {\r\n        if (!(buttonid)) {\r\n            buttonid = reportId.replace(/[^a-zA-Z]/g, '') + 'PreviewButton';\r\n        }\r\n\r\n        if (!(attributesObject)) attributesObject = {};\r\n        attributesObject['render-target'] = this.#previewFrameId;\r\n        attributesObject['report-id'] = reportId;\r\n        buttonClass += ' AptTecPrintPreview';\r\n        const disabledAttrib = this.#isSourceUrlLoaded ? '' : 'disabled';\r\n        const result = createButtonAtParent(buttonid, buttonParent, buttonClass, iconClass, buttonText,\r\n            location, attributesObject, disabledAttrib);\r\n        // extraInformation =disabledAttrib,  preventDuplicate = true\r\n        return { previewButton: result.ButtonObject, AlreadyExists: result.AlreadyExists };\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} buttonResult \r\n     * @param {Object} dataSetter - Anyof \"function\" or \"string\" \r\n     *      if it is a function, the function will be called while rendering the preview.\r\n     *      'direct' - the JSON data will be read directly from the aptTecData property\r\n     *      'kendoGrid' - the JSON data will be read directly from the Kendo grid using data-id set using button\r\n     * @returns \r\n     */\r\n    #HandlePreviewButton(buttonResult, dataSetter ) {\r\n        const aptIntegration = this;\r\n        buttonResult.previewButton.addEventListener('click', () => {\r\n            //this is closure or inner function so it always rememebers the correct dataSetter\r\n            if (typeof dataSetter === 'function') {\r\n                aptIntegration.designerWindow.aptTecReports.dataGetter = dataSetter;\r\n            }\r\n            else {\r\n                switch (dataSetter) {\r\n                case 'direct':\r\n                    aptIntegration.designerWindow.aptTecReports.dataGetter = () => { \r\n                        aptIntegration.aptTecData.Data = buttonResult.previewButton.printData;\r\n                        return aptIntegration.aptTecData; \r\n                    };\r\n                    break;\r\n                case 'kendoGrid':\r\n                    aptIntegration.designerWindow.aptTecReports.dataGetter = () => { \r\n                        aptIntegration.aptTecData.Data = \r\n                            getKendoSortedData(buttonResult.previewButton.dataset.gridId);\r\n                        return aptIntegration.aptTecData; \r\n                    };\r\n                    break;\r\n                default:\r\n                    aptIntegration.designerWindow.aptTecReports.dataGetter = null;\r\n                    break;\r\n                }\r\n            }\r\n            // https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes note that dashes are converted to camel case\r\n            aptIntegration.showPreview(buttonResult.previewButton.dataset.reportId);\r\n        });\r\n    }\r\n\r\n    showPreview(reportId) {\r\n        this.designerWindow.aptTecReports.reportId = reportId;\r\n        $('#' + this.#previewFrameId).show();\r\n        //this always loads the template from server and does entire refresh.\r\n        this.designerWindow.aptTecReports.refreshReport();\r\n    }\r\n\r\n    //return aptTecintegration.sendTelerikData(\"#\" + printableGridId, \"/Office/Services/GetMaster.aspx?\r\n    fetchData(Url, aptTecDataPropertyName, sourcePropertyName) {\r\n        const thisIntegration = this;\r\n        return new Promise(function (previewDataResolve, previewDataReject) {\r\n            fetch(Url)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    thisIntegration.aptTecData[aptTecDataPropertyName] = \r\n                    (sourcePropertyName) ? data[sourcePropertyName] : data;\r\n                    previewDataResolve(thisIntegration.aptTecData); // when successful\r\n                }).catch(error => {\r\n                    console.error('Error loading report parameters:', error);\r\n                    previewDataReject();  // when error\r\n                });\r\n        }); \r\n    }\r\n\r\n    print() {\r\n        this.designerWindow.document.getElementById('reportIframe').contentWindow.print();\r\n    }\r\n    getPageCount() {\r\n        // const contentWindow = this.designerWindow.document.getElementById('reportIframe').contentWindow;\r\n        // const countString = contentWindow.getComputedStyle(\r\n        //     contentWindow.document.querySelector(\".pagedjs_pages\"), null)\r\n        //     .getPropertyValue(\"--pagedjs-page-count\");\r\n        // if (countString) {\r\n        //     return parseInt(countString);\r\n        // }\r\n        // return -1;\r\n        return this.designerWindow.aptTecReports.PagesCount;\r\n    }\r\n}; "],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","createAssignElement","tag","propObject","undefined","element","globalThis","document","createElement","assign","createControl","controlClass","iconClass","label","control","className","innerHTML","createButton","buttonClass","onClick","button","addEventListener","createButtonAtParent","id","buttonParent","buttonText","location","dataAttributesObject","extraInformation","preventDuplicate","parentElement","querySelector","buttonSelector","ButtonObject","AlreadyExists","attributesText","entries","buttonTagText","createUrlFromJsonString","jsonString","blob","Blob","type","URL","createObjectURL","createUrlFromObject","object","JSON","stringify","autoDownloadUrl","url","filename","href","download","click","loadStylesheet","link","rel","head","appendChild","loadScript","callbackOnLoad","isDefer","isAsync","script","src","async","defer","onload","mergeExistingProperties","target","source","result","parse","firstNCharacters","jsonArray","propertyToModify","n","forEach","item","length","substring","getKendoSortedData","gridSelector","grid","data","dataSource","sort","window","kendo","Query","getDeviceDPI","dpiDiv","style","width","body","dpi","offsetWidth","removeChild","AptTec","Downloader","constructor","minFileSize","maxRetries","retryDelay","splits","this","chunkCompleted","Event","chunkSize","fileLength","supportsChunked","Math","ceil","console","log","downloadSimple","error","buffer","response","fetch","method","headers","parseInt","chunks","startByte","downloadedSize","promises","totalSize","endByte","min","start","end","promise","then","chunk","push","progress","detail","dispatchEvent","catch","closureBlock","Promise","all","a","b","map","chunkData","Range","ok","Error","status","arrayBuffer","resolve","setTimeout","DynamicControls","Json","Graphics","AptTecReporting","Kendo","getSortedData","Integration","sourceUrl","previewFrameId","templatesLocation","frameStyle","isPreviewTypeDesigner","aptTecData","CommonData","InstanceData","Data","designerWindow","endsWith","getElementById","iFrameTag","$","append","designerHTMLUrl","text","html_template","modified_html","replace","RegExp","srcdoc","contentWindow","initilizePreview","closeAction","hide","aptTecReports","showHideDesigner","addPreviewButton","reportId","attributesObject","dataSetter","buttonid","buttonResult","previewButton","aptIntegration","dataGetter","printData","dataset","gridId","showPreview","show","refreshReport","fetchData","Url","aptTecDataPropertyName","sourcePropertyName","thisIntegration","previewDataResolve","previewDataReject","json","print","getPageCount","PagesCount"],"sourceRoot":""}